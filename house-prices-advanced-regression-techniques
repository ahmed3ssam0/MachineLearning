{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"colab":{"provenance":[],"authorship_tag":"ABX9TyNuAqZcY1efDBw7WtQT57XW"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5407,"databundleVersionId":868283,"sourceType":"competition"}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/ahmedessamshadeed/house-prices-regression?scriptVersionId=210680566\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"id":"FNElX1LhUqU3","executionInfo":{"status":"ok","timestamp":1733080904881,"user_tz":-120,"elapsed":16495,"user":{"displayName":"Ahmed Essam","userId":"04056900869702112005"}},"outputId":"2a588dd6-c49d-423b-f5de-a5392357cbac","trusted":true,"execution":{"iopub.status.busy":"2024-12-01T19:24:46.363376Z","iopub.execute_input":"2024-12-01T19:24:46.363832Z","iopub.status.idle":"2024-12-01T19:24:47.62831Z","shell.execute_reply.started":"2024-12-01T19:24:46.363783Z","shell.execute_reply":"2024-12-01T19:24:47.627008Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import numpy as np\n\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\n\nfrom sklearn.preprocessing import LabelEncoder, MinMaxScaler\n\nfrom sklearn.model_selection import train_test_split\n\n\n\nfrom sklearn.linear_model import LinearRegression, SGDRegressor, Lasso, Ridge, ElasticNet\n\nfrom sklearn.svm import SVR\n\nfrom sklearn.neighbors import KNeighborsRegressor\n\nfrom sklearn.tree import DecisionTreeRegressor\n\nfrom sklearn.ensemble import RandomForestRegressor, BaggingRegressor, ExtraTreesRegressor, AdaBoostRegressor\n\nfrom xgboost import XGBRegressor\n\nfrom lightgbm import LGBMRegressor\n\n\n\nfrom sklearn.metrics import mean_squared_error\n\nimport warnings\n\nwarnings.filterwarnings('ignore')\n\nsns.set()","metadata":{"id":"3vPN6nfisrHi","executionInfo":{"status":"ok","timestamp":1733080904881,"user_tz":-120,"elapsed":9,"user":{"displayName":"Ahmed Essam","userId":"04056900869702112005"}},"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T19:24:51.793058Z","iopub.execute_input":"2024-12-01T19:24:51.794321Z","iopub.status.idle":"2024-12-01T19:24:54.527543Z","shell.execute_reply.started":"2024-12-01T19:24:51.794275Z","shell.execute_reply":"2024-12-01T19:24:54.526531Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# FUNCTIONS\n\ndef check_missing(df, drop_list):\n\n  for col in df.columns:\n\n    if df[col].isnull().sum() > 0 :\n\n      if df[col].isnull().sum() > 0.5 * len(df):\n\n        drop_list.append(col)\n\n      print(f\"{col} - {df[col].isnull().sum()} - {df[col].dtype}\")","metadata":{"id":"RgnbyDHfiHOm","executionInfo":{"status":"ok","timestamp":1733080904881,"user_tz":-120,"elapsed":9,"user":{"displayName":"Ahmed Essam","userId":"04056900869702112005"}},"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T19:25:31.495209Z","iopub.execute_input":"2024-12-01T19:25:31.495847Z","iopub.status.idle":"2024-12-01T19:25:31.502396Z","shell.execute_reply.started":"2024-12-01T19:25:31.495807Z","shell.execute_reply":"2024-12-01T19:25:31.501051Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/house-prices-advanced-regression-techniques/train.csv')\n\ndf","metadata":{"executionInfo":{"elapsed":9,"status":"ok","timestamp":1733080904881,"user":{"displayName":"Ahmed Essam","userId":"04056900869702112005"},"user_tz":-120},"id":"yeCpnPNMtTtP","outputId":"b7d91e62-863a-456d-ae37-07f605b67032","trusted":true,"execution":{"iopub.status.busy":"2024-12-01T19:25:55.348857Z","iopub.execute_input":"2024-12-01T19:25:55.349292Z","iopub.status.idle":"2024-12-01T19:25:55.546263Z","shell.execute_reply.started":"2024-12-01T19:25:55.349251Z","shell.execute_reply":"2024-12-01T19:25:55.545018Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"droping = []\n\ncheck_missing(df, droping)\n\nprint(droping)","metadata":{"id":"YP8Me7cAWQM-","executionInfo":{"status":"ok","timestamp":1733080904882,"user_tz":-120,"elapsed":8,"user":{"displayName":"Ahmed Essam","userId":"04056900869702112005"}},"outputId":"89904e81-26b8-46cb-fd19-ebc8986e503b","trusted":true,"execution":{"iopub.status.busy":"2024-12-01T19:25:56.84015Z","iopub.execute_input":"2024-12-01T19:25:56.840557Z","iopub.status.idle":"2024-12-01T19:25:56.873931Z","shell.execute_reply.started":"2024-12-01T19:25:56.84051Z","shell.execute_reply":"2024-12-01T19:25:56.872847Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.drop(droping, axis=1, inplace=True)\n\ndf.drop(\"Id\", axis=1, inplace=True)\n\ndf","metadata":{"id":"kVOz8n6QYlys","executionInfo":{"status":"ok","timestamp":1733080905213,"user_tz":-120,"elapsed":338,"user":{"displayName":"Ahmed Essam","userId":"04056900869702112005"}},"outputId":"f3aa44cf-8570-415f-eb7e-d981837ecf17","trusted":true,"execution":{"iopub.status.busy":"2024-12-01T19:25:59.234955Z","iopub.execute_input":"2024-12-01T19:25:59.235414Z","iopub.status.idle":"2024-12-01T19:25:59.265673Z","shell.execute_reply.started":"2024-12-01T19:25:59.235374Z","shell.execute_reply":"2024-12-01T19:25:59.264452Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"check_missing(df, droping)","metadata":{"id":"wIkzlqpaZaqb","executionInfo":{"status":"ok","timestamp":1733080905213,"user_tz":-120,"elapsed":8,"user":{"displayName":"Ahmed Essam","userId":"04056900869702112005"}},"outputId":"8aca37b2-0dd8-4377-c8a9-d768d3ae8b58","trusted":true,"execution":{"iopub.status.busy":"2024-12-01T19:26:00.525924Z","iopub.execute_input":"2024-12-01T19:26:00.526787Z","iopub.status.idle":"2024-12-01T19:26:00.557038Z","shell.execute_reply.started":"2024-12-01T19:26:00.52674Z","shell.execute_reply":"2024-12-01T19:26:00.555651Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for col in df.columns:\n\n  if df[col].dtype == 'object':\n\n    df[col].fillna(df[col].mode()[0], inplace=True)\n\n  else:\n\n    df[col].fillna(df[col].median(), inplace=True)\n\ncheck_missing(df, droping)","metadata":{"id":"QcNx2AQwia1O","executionInfo":{"status":"ok","timestamp":1733080905213,"user_tz":-120,"elapsed":7,"user":{"displayName":"Ahmed Essam","userId":"04056900869702112005"}},"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T19:26:01.624848Z","iopub.execute_input":"2024-12-01T19:26:01.626137Z","iopub.status.idle":"2024-12-01T19:26:01.682351Z","shell.execute_reply.started":"2024-12-01T19:26:01.626073Z","shell.execute_reply":"2024-12-01T19:26:01.681229Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"encoder = LabelEncoder()\n\nfor col in df.columns:\n\n  if df[col].dtype == 'object':\n\n    df[col] = encoder.fit_transform(df[col])\n\ndf","metadata":{"id":"cpvf6WY0x4_D","executionInfo":{"status":"ok","timestamp":1733080905213,"user_tz":-120,"elapsed":6,"user":{"displayName":"Ahmed Essam","userId":"04056900869702112005"}},"outputId":"9ea4f069-a02b-4b5a-ee84-495a3fdc4158","trusted":true,"execution":{"iopub.status.busy":"2024-12-01T19:26:02.968158Z","iopub.execute_input":"2024-12-01T19:26:02.968636Z","iopub.status.idle":"2024-12-01T19:26:03.034461Z","shell.execute_reply.started":"2024-12-01T19:26:02.968587Z","shell.execute_reply":"2024-12-01T19:26:03.03318Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"scaler = MinMaxScaler()\n\n\n\nX = df.drop('SalePrice', axis=1)\n\ny = df['SalePrice']\n\nX = scaler.fit_transform(X)\n\ny_df = y.to_frame()\n\ny = scaler.fit_transform(y_df)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, shuffle=True)","metadata":{"id":"yM4XR7vNzLT0","executionInfo":{"status":"ok","timestamp":1733080905213,"user_tz":-120,"elapsed":5,"user":{"displayName":"Ahmed Essam","userId":"04056900869702112005"}},"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T19:26:03.96512Z","iopub.execute_input":"2024-12-01T19:26:03.966253Z","iopub.status.idle":"2024-12-01T19:26:03.993519Z","shell.execute_reply.started":"2024-12-01T19:26:03.966194Z","shell.execute_reply":"2024-12-01T19:26:03.992154Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"models = []\n\nmodel_1 = LinearRegression()\n\nmodel_2 = SGDRegressor()\n\nmodel_3 = Lasso()\n\nmodel_4 = Ridge()\n\nmodel_5 = ElasticNet()\n\nmodel_6 = SVR()\n\nmodel_7 = KNeighborsRegressor()\n\nmodel_8 = DecisionTreeRegressor()\n\nmodel_9 = RandomForestRegressor()\n\nmodel_10 = BaggingRegressor()\n\nmodel_11 = ExtraTreesRegressor()\n\nmodel_12 = AdaBoostRegressor()\n\nmodel_13 = XGBRegressor(verbose=0)\n\nmodel_14 = LGBMRegressor(verbose=0)\n\nfor i in range(1, 15):\n\n  exec(f\"model_{i}.fit(X_train, y_train)\")\n\n  exec(f\"models.append(model_{i})\")\n\nmodels_names = ['LinearRegression', 'SGDRegressor', 'Lasso', 'Ridge', 'ElasticNet', 'SVR', 'KNeighborsRegressor', 'DecisionTreeRegressor', 'RandomForestRegressor', 'BaggingRegressor', 'ExtraTreesRegressor', 'AdaBoostRegressor', 'XGBRegressor', 'LGBMRegressor']","metadata":{"id":"T0pQXe1hyUxC","executionInfo":{"status":"ok","timestamp":1733080923043,"user_tz":-120,"elapsed":17835,"user":{"displayName":"Ahmed Essam","userId":"04056900869702112005"}},"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T19:26:05.804904Z","iopub.execute_input":"2024-12-01T19:26:05.805316Z","iopub.status.idle":"2024-12-01T19:26:10.423303Z","shell.execute_reply.started":"2024-12-01T19:26:05.805281Z","shell.execute_reply":"2024-12-01T19:26:10.421985Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def ML_models(x_train, x_valid, y_train, y_valid, models, models_names):\n\n  # Calculate predictions and squared errors for each model:\n\n  squared_errors = []\n\n  for model in models:\n\n      y_pred = model.predict(x_valid)\n\n      mse = mean_squared_error(y_valid, y_pred)\n\n      squared_errors.append(f'{mse * 100:.2f}%')  # Format as percentage\n\n\n\n  # Calculate train and test scores:\n\n  train_score = [model.score(x_train, y_train) for model in models]\n\n  valid_score = [model.score(x_valid, y_valid) for model in models]\n\n\n\n  # Difference between training and testing ratio\n\n  ratio = []\n\n  for train, valid in zip(train_score, valid_score):\n\n      result = train - valid\n\n      ratio.append(f'{result * 100:.2f}%')\n\n\n\n  # Measure model state:6\n\n  rate = []\n\n  for train, valid in zip(train_score, valid_score):\n\n      if train <= 0.65 and valid <= 0.65:\n\n          rate.append('bad')\n\n      elif train > valid * 1.10:\n\n          rate.append('overfite')\n\n      elif train > 0.65 and train < 0.80 and valid > 0.65 and valid < 0.80:\n\n          rate.append('middle')\n\n      elif train >= 0.80 and valid >= 0.80 and train < 1.00 and valid < 1.00:\n\n          rate.append('good')\n\n      elif train >= 0.80 and valid < 0.80:\n\n          rate.append('high train, low test')\n\n      else:\n\n          rate.append('unknown')\n\n\n\n  # Create DataFrame\n\n  model_score = pd.DataFrame({\n\n      'Model': models_names,\n\n      'Train score': [f'{round(score * 100, 2)}%' for score in train_score],\n\n      'Valid score': [f'{round(score * 100, 2)}%' for score in valid_score],\n\n      'Ratio difference': ratio,\n\n      'Evaluate model': rate,\n\n      'Squared error': squared_errors\n\n  })\n\n  return model_score","metadata":{"id":"Q7l4XbWBzIQk","executionInfo":{"status":"ok","timestamp":1733080923044,"user_tz":-120,"elapsed":3,"user":{"displayName":"Ahmed Essam","userId":"04056900869702112005"}},"trusted":true,"execution":{"iopub.status.busy":"2024-12-01T19:26:10.425382Z","iopub.execute_input":"2024-12-01T19:26:10.425807Z","iopub.status.idle":"2024-12-01T19:26:10.437736Z","shell.execute_reply.started":"2024-12-01T19:26:10.425771Z","shell.execute_reply":"2024-12-01T19:26:10.436536Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"result = ML_models(X_train, X_test, y_train, y_test, models, models_names)\n\nresult","metadata":{"id":"PckWeMBZ5AhW","executionInfo":{"status":"ok","timestamp":1733080923349,"user_tz":-120,"elapsed":308,"user":{"displayName":"Ahmed Essam","userId":"04056900869702112005"}},"outputId":"4fec5e4a-32ba-4b2c-8878-b4a4c5aba800","trusted":true,"execution":{"iopub.status.busy":"2024-12-01T19:26:10.439101Z","iopub.execute_input":"2024-12-01T19:26:10.439493Z","iopub.status.idle":"2024-12-01T19:26:10.850557Z","shell.execute_reply.started":"2024-12-01T19:26:10.439451Z","shell.execute_reply":"2024-12-01T19:26:10.849468Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# prompt: grid search for XGBRegressor\n\n\n\nfrom sklearn.model_selection import GridSearchCV\n\n\n\n# Define the parameter grid for XGBRegressor\n\nparam_grid = {\n\n    'n_estimators': [100, 200, 300],\n\n    'learning_rate': [0.01, 0.1, 0.2],\n\n    'max_depth': [3, 5, 7],\n\n    'subsample': [0.8, 1.0],\n\n    'colsample_bytree': [0.8, 1.0]\n\n}\n\n\n\n# Initialize XGBRegressor\n\nxgb_model = model_13\n\n\n\n# Perform grid search\n\ngrid_search = GridSearchCV(estimator=xgb_model, param_grid=param_grid, cv=3, scoring='neg_mean_squared_error', n_jobs=-1, verbose=2)\n\ngrid_search.fit(X_train, y_train)\n\n\n\n# Print the best parameters and best score\n\nprint(\"Best parameters found: \", grid_search.best_params_)\n\nprint(\"Lowest RMSE found: \", np.sqrt(np.abs(grid_search.best_score_)))\n\n\n\n# Evaluate the best model\n\nbest_xgb_model = grid_search.best_estimator_\n\ny_pred = best_xgb_model.predict(X_test)\n\nmse = mean_squared_error(y_test, y_pred)\n\nprint(f\"Mean Squared Error of best model: {mse}\")","metadata":{"id":"D5GMYgKcBgAy","outputId":"d2547978-32e6-4855-eb87-7a6092b4c5b4","trusted":true,"execution":{"iopub.status.busy":"2024-12-01T19:26:13.115472Z","iopub.execute_input":"2024-12-01T19:26:13.115893Z","iopub.status.idle":"2024-12-01T19:28:43.092383Z","shell.execute_reply.started":"2024-12-01T19:26:13.115854Z","shell.execute_reply":"2024-12-01T19:28:43.091102Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **TEST AND SUBMISSION**","metadata":{"id":"FsFM89dJCZYM"}},{"cell_type":"code","source":"df_test = pd.read_csv('/kaggle/input/house-prices-advanced-regression-techniques/test.csv')\n\ndf_test","metadata":{"id":"PiwWwCkU6zVF","trusted":true,"execution":{"iopub.status.busy":"2024-12-01T19:28:59.86297Z","iopub.execute_input":"2024-12-01T19:28:59.863401Z","iopub.status.idle":"2024-12-01T19:28:59.925069Z","shell.execute_reply.started":"2024-12-01T19:28:59.863363Z","shell.execute_reply":"2024-12-01T19:28:59.923737Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"droping = []\n\ncheck_missing(df_test, droping)\n\ndroping.remove('FireplaceQu')\n\nprint(droping)","metadata":{"id":"pAPYXkq3DsAI","trusted":true,"execution":{"iopub.status.busy":"2024-12-01T19:29:00.267111Z","iopub.execute_input":"2024-12-01T19:29:00.267536Z","iopub.status.idle":"2024-12-01T19:29:00.319271Z","shell.execute_reply.started":"2024-12-01T19:29:00.26749Z","shell.execute_reply":"2024-12-01T19:29:00.317364Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_test.drop(droping, axis=1, inplace=True)\n\ndf_test.drop(\"Id\", axis=1, inplace=True)\n\ndf_test","metadata":{"id":"2-sY4IpVCuZo","trusted":true,"execution":{"iopub.status.busy":"2024-12-01T19:29:01.940697Z","iopub.execute_input":"2024-12-01T19:29:01.941115Z","iopub.status.idle":"2024-12-01T19:29:01.969599Z","shell.execute_reply.started":"2024-12-01T19:29:01.941079Z","shell.execute_reply":"2024-12-01T19:29:01.968301Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for col in df_test.columns:\n\n  if df_test[col].dtype == 'object':\n\n    df_test[col].fillna(df_test[col].mode()[0], inplace=True)\n\n  else:\n\n    df_test[col].fillna(df_test[col].median(), inplace=True)\n\ncheck_missing(df_test, droping)","metadata":{"id":"kPg7gplZCy-o","trusted":true,"execution":{"iopub.status.busy":"2024-12-01T19:29:02.811624Z","iopub.execute_input":"2024-12-01T19:29:02.812346Z","iopub.status.idle":"2024-12-01T19:29:02.86767Z","shell.execute_reply.started":"2024-12-01T19:29:02.812306Z","shell.execute_reply":"2024-12-01T19:29:02.86645Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"encoder = LabelEncoder()\n\nfor col in df_test.columns:\n\n  if df_test[col].dtype == 'object':\n\n    df_test[col] = encoder.fit_transform(df_test[col])\n\ndf_test","metadata":{"id":"l-SaAvbWDFvP","trusted":true,"execution":{"iopub.status.busy":"2024-12-01T19:29:03.703725Z","iopub.execute_input":"2024-12-01T19:29:03.704151Z","iopub.status.idle":"2024-12-01T19:29:03.756669Z","shell.execute_reply.started":"2024-12-01T19:29:03.704115Z","shell.execute_reply":"2024-12-01T19:29:03.755562Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"y_pred = best_xgb_model.predict(df_test)\n\ny_pred","metadata":{"id":"Is-h3EUYFf8-","trusted":true,"execution":{"iopub.status.busy":"2024-12-01T19:29:04.454275Z","iopub.execute_input":"2024-12-01T19:29:04.455092Z","iopub.status.idle":"2024-12-01T19:29:04.480092Z","shell.execute_reply.started":"2024-12-01T19:29:04.455038Z","shell.execute_reply":"2024-12-01T19:29:04.478832Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Reshape y_pred to 2D array\n\ny_pred_reshaped = y_pred.reshape(-1, 1)\n\n\n\n# Transform the reshaped predictions\n\nscaled_data = scaler.transform(y_pred_reshaped)\n\n\n\n# Inverse transform the reshaped predictions\n\ny_pred_rescaler = scaler.inverse_transform(y_pred_reshaped)\n\n\n\n# Output the final predictions\n\ny_pred_rescaler","metadata":{"id":"mkTKTt6yFj_G","trusted":true,"execution":{"iopub.status.busy":"2024-12-01T19:29:08.735017Z","iopub.execute_input":"2024-12-01T19:29:08.736812Z","iopub.status.idle":"2024-12-01T19:29:08.747753Z","shell.execute_reply.started":"2024-12-01T19:29:08.736748Z","shell.execute_reply":"2024-12-01T19:29:08.745934Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"submission = pd.read_csv('/kaggle/input/house-prices-advanced-regression-techniques/sample_submission.csv')\n\nsubmission['SalePrice'] = y_pred_rescaler\n\nsubmission.to_csv('submission.csv', index=False)","metadata":{"id":"xm8uIOT6Hawd","trusted":true,"execution":{"iopub.status.busy":"2024-12-01T19:29:42.336414Z","iopub.execute_input":"2024-12-01T19:29:42.336942Z","iopub.status.idle":"2024-12-01T19:29:42.355846Z","shell.execute_reply.started":"2024-12-01T19:29:42.336905Z","shell.execute_reply":"2024-12-01T19:29:42.354666Z"}},"outputs":[],"execution_count":null}]}